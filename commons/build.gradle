plugins {
  // id 'groovy'
  id 'java-library'
  // id 'org.jetbrains.kotlin.jvm' version '1.3.41'
  id 'maven-publish'
}

group 'sarf'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    google()
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier.set 'sources'
}

task javadocJar(type: Jar) {
  from javadoc
  archiveClassifier.set 'javadoc'
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'

  // compile 'org.codehaus.groovy:groovy-all:2.4.17'
  // implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:'
  testImplementation group: 'junit', name: 'junit', version: '4.12'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      //artifactId = 'my-library'
      from components.java
      artifact sourcesJar
      artifact javadocJar
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      pom {
        name = 'Commons'
        description = 'Java library consisting of common helper classes for my projects'
        url = 'https://github.com/sarf/java-automation/tree/master/commons'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'sarf'
            name = 'Secret for now'
            email = 'na@site.com'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/sarf/java-automation/tree/master/commons.git'
          developerConnection = 'scm:git:ssh://github.com/sarf/java-automation.git'
          url = 'https://github.com/sarf/java-automation/tree/master/commons'
        }
      }
    }
  }
  repositories {
    maven {
      // change URLs to point to your repos, e.g. http://my.org/repo
      def releasesRepoUrl = "$buildDir/repos/releases"
      def snapshotsRepoUrl = "$buildDir/repos/snapshots"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
  }
}

javadoc {
  if (JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}

publishToMavenLocal {
  dependsOn build
  shouldRunAfter build
}

